name: Build PR

on:
  pull_request:
    branches:
      - main

permissions:
  contents: read
  checks: write
  pull-requests: write
  issues: write
  packages: write

env:
  CARGO_TERM_COLOR: always
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}
  # just a name, but storing it separately as we're nice people
  DOCKER_IMAGE_ARTIFACT_NAME: Docker image
  DOCKER_IMAGE_OUTPUT_LOCATION: /tmp
  DOCKER_IMAGE_TAR_LOCATION: /tmp/docker-image.tar # notice /tmp same as DOCKER_IMAGE_OUTPUT_LOCATION

concurrency:
  # each new commit to a PR runs this workflow
  # so we need to avoid a long running older one from overwriting the 'pr-<number>-latest'
  group: "${{ github.workflow }} @ ${{ github.event.pull_request.head.label }}"
  cancel-in-progress: true

jobs:
  changes:
    name: Detect changes
    runs-on: ubuntu-latest
    outputs:
      code: ${{ steps.filter.outputs.code }}
    steps:
      - name: Checkout
        uses: actions/checkout@ec3a7ce113134d7a93b817d10a8272cb61118579

      - name: Check if we actually made changes
        uses: dorny/paths-filter@b2feaf19c27470162a626bd6fa8438ae5b263721
        id: filter
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          filters: .github/file-filters.yml

  calculate-version:
    name: Calculate version
    runs-on: ubuntu-latest
    needs:
      - changes
    outputs:
      version: ${{ steps.version.outputs.nextversion }}
    if: |
      (needs.changes.outputs.code == 'true')
    permissions:
      contents: write # for the dry run
    steps:
      - name: Checkout
        uses: actions/checkout@ec3a7ce113134d7a93b817d10a8272cb61118579
        with:
          # we cannot use the actual merge as it is not a real commit yet
          # so we get the tip of the PR
          # and we protect ourselves from other changes by enforcing
          # the branch to be up to date with main before merging
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Setup Node.js
        uses: actions/setup-node@270253e841af726300e85d718a5f606959b2903c
        with:
          node-version: "lts/*"
          cache: "npm"
          cache-dependency-path: "**/package-lock.json"

      - name: Install dependencies
        shell: bash
        run: |
          npm ci --ignore-scripts

      - name: Calculate next version
        id: version
        shell: bash
        run: |

          # semantic-release uses this to determine if we're on
          # a PR, but we just want to calculate a version number, nothing more
          # so we bypass it all
          export GITHUB_EVENT_NAME=""
          export GITHUB_REF="${{ github.head_ref }}"

          npm run dump-version-number -- --branches '${{ github.head_ref }}'

          echo "::set-output name=nextversion::$(cat NEXTVERSION)"

  cargo-build:
    name: Cargo build
    runs-on: ubuntu-latest
    needs:
      - changes
    if: |
      (needs.changes.outputs.code == 'true')
    steps:
      - uses: actions/checkout@ec3a7ce113134d7a93b817d10a8272cb61118579

      - name: Set up toolchain
        uses: actions-rs/toolchain@16499b5e05bf2e26879000db0c1d13f7e13fa3af
        with:
          profile: minimal
          toolchain: 1.56.1
          override: true

      - name: Cache dependencies
        uses: actions/cache@c64c572235d810460d0d6876e9c705ad5002b353
        env:
          CACHE_NAME: cargo-cache-dependencies
        with:
          path: |
            ~/.cargo/
            ./target
          key: ${{ runner.os }}-build-${{ env.CACHE_NAME }}-${{ hashFiles('Cargo.lock') }}-cargobuild
          restore-keys: |
            ${{ runner.os }}-build-${{ env.CACHE_NAME }}-${{ hashFiles('Cargo.lock') }}-
            ${{ runner.os }}-build-${{ env.CACHE_NAME }}-

      - name: Cargo build
        uses: actions-rs/cargo@844f36862e911db73fe0815f00a4a2602c279505
        with:
          command: build
          args: --verbose

  cargo-fmt:
    name: Check formatting
    runs-on: ubuntu-latest
    needs:
      - changes
    if: |
      (needs.changes.outputs.code == 'true')
    steps:
      - uses: actions/checkout@ec3a7ce113134d7a93b817d10a8272cb61118579

      - name: Set up toolchain
        uses: actions-rs/toolchain@16499b5e05bf2e26879000db0c1d13f7e13fa3af
        with:
          profile: minimal
          toolchain: 1.56.1
          override: true
          components: rustfmt

      - name: Cache dependencies
        uses: actions/cache@c64c572235d810460d0d6876e9c705ad5002b353
        env:
          CACHE_NAME: cargo-cache-dependencies
        with:
          path: |
            ~/.cargo/
            ./target
          key: ${{ runner.os }}-build-${{ env.CACHE_NAME }}-${{ hashFiles('Cargo.lock') }}-cargofmt
          restore-keys: |
            ${{ runner.os }}-build-${{ env.CACHE_NAME }}-${{ hashFiles('Cargo.lock') }}-
            ${{ runner.os }}-build-${{ env.CACHE_NAME }}-

      - name: Cargo fmt
        uses: actions-rs/cargo@844f36862e911db73fe0815f00a4a2602c279505
        with:
          command: fmt
          args: --all -- --check

  cargo-test-and-report:
    name: Cargo test and report
    runs-on: ubuntu-latest
    needs:
      - changes
    if: |
      (needs.changes.outputs.code == 'true')
    steps:
      - uses: actions/checkout@ec3a7ce113134d7a93b817d10a8272cb61118579

      - name: Set up toolchain
        uses: actions-rs/toolchain@16499b5e05bf2e26879000db0c1d13f7e13fa3af
        with:
          profile: minimal
          toolchain: 1.56.1
          override: true

      - name: Cache dependencies
        uses: actions/cache@c64c572235d810460d0d6876e9c705ad5002b353
        env:
          CACHE_NAME: cargo-cache-dependencies
        with:
          path: |
            ~/.cargo/
            ./target
          key: ${{ runner.os }}-build-${{ env.CACHE_NAME }}-${{ hashFiles('Cargo.lock') }}-cargotest
          restore-keys: |
            ${{ runner.os }}-build-${{ env.CACHE_NAME }}-${{ hashFiles('Cargo.lock') }}-
            ${{ runner.os }}-build-${{ env.CACHE_NAME }}-

      - name: Install cargo2junit for formatting
        run: |
          cargo install cargo2junit;

      - name: Setup Node.js
        uses: actions/setup-node@270253e841af726300e85d718a5f606959b2903c
        with:
          node-version: "lts/*"
          cache: "npm"
          cache-dependency-path: "**/package-lock.json"

      - name: Install dependencies
        shell: bash
        run: |
          npm ci --ignore-scripts

      - name: Download tarpulin tar, extract, and add folder to path
        uses: actions/github-script@441359b1a30438de65712c2fbca0abe4816fa667
        with:
          script: |
            const tc = require("@actions/tool-cache");

            const release = await github.rest.repos.getLatestRelease({
                owner: "xd009642",
                repo: "tarpaulin"
            });

            const asset = release.data.assets.find(asset => {
                return asset["content_type"] === "application/gzip" && asset.name === `cargo-tarpaulin-${release.data.tag_name}-travis.tar.gz`;
            });

            const urlToTarpualinTar = asset.browser_download_url;

            const tarpaulinTarPath = await tc.downloadTool(urlToTarpualinTar);
            const tarpaulinExtractedFolder = await tc.extractTar(tarpaulinTarPath, null, ["--extract", "--gzip"]);

            core.addPath(tarpaulinExtractedFolder);

      - name: Run tarpaulin
        run: |
          mkdir reports

          cargo tarpaulin --output-dir reports --out Lcov -- -Z unstable-options --format json | cargo2junit > reports/result.xml

      - name: Upload test results
        if: ${{ always() }}
        uses: EnricoMi/publish-unit-test-result-action@8c0ddccd03f69215064876293657094714331b04
        with:
          check_name: Test Results
          github_token: ${{ secrets.GITHUB_TOKEN }}
          files: reports/result.xml

      - name: Upload to CodeCov
        if: ${{ always() }}
        uses: codecov/codecov-action@f32b3a3741e1053eb607407145bc9619351dc93b
        with:
          # # required for private repositories:
          # token: ${{ secrets.CODECOV_TOKEN }}
          directory: reports
          fail_ci_if_error: true

  cargo-clippy-and-report:
    name: Run Clippy
    runs-on: ubuntu-latest
    needs:
      - changes
    if: |
      (needs.changes.outputs.code == 'true')
    steps:
      - uses: actions/checkout@ec3a7ce113134d7a93b817d10a8272cb61118579

      - name: Set up toolchain
        uses: actions-rs/toolchain@16499b5e05bf2e26879000db0c1d13f7e13fa3af
        with:
          profile: minimal
          toolchain: 1.56.1
          override: true
          components: clippy

      - name: Cache dependencies
        uses: actions/cache@c64c572235d810460d0d6876e9c705ad5002b353
        env:
          CACHE_NAME: cargo-cache-dependencies
        with:
          path: |
            ~/.cargo/
            ./target
          key: ${{ runner.os }}-build-${{ env.CACHE_NAME }}-${{ hashFiles('Cargo.lock') }}-cargoclippy
          restore-keys: |
            ${{ runner.os }}-build-${{ env.CACHE_NAME }}-${{ hashFiles('Cargo.lock') }}-
            ${{ runner.os }}-build-${{ env.CACHE_NAME }}-

      - name: Cargo clippy
        uses: actions-rs/cargo@844f36862e911db73fe0815f00a4a2602c279505
        with:
          command: clippy
          args: --all-targets --all-features -- -D warnings

      - uses: actions-rs/clippy-check@b5b5f21f4797c02da247df37026fcd0a5024aa4d
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --all-targets --all-features -- -D warnings
          name: Clippy report

  docker-build:
    name: Build docker container
    runs-on: ubuntu-latest
    needs:
      - calculate-version
    steps:
      - name: Checkout
        uses: actions/checkout@ec3a7ce113134d7a93b817d10a8272cb61118579

      - name: Set the Cargo.toml version before we copy in the data into the docker container
        shell: bash
        run: |
          ./.github/scripts/update-version.sh ${{ needs.calculate-version.outputs.version }}

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@94ab11c41e45d028884a99163086648e898eed25

      # TODO validate no changes between github.event.pull_request.head.sha and the actual current sha (representing the hypothetical merge)

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@548e2346a9987b56d8a4104fe776321ff8e23440
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=pr,suffix=-latest
            type=raw,value=pr-${{ github.event.pull_request.base.sha }}-${{ github.event.pull_request.head.sha }}
          labels: |
            org.opencontainers.image.version=pr-${{ github.event.number }}
            org.opencontainers.image.source=${{ github.event.pull_request.html_url }}

      - name: Cache Docker layers
        uses: actions/cache@c64c572235d810460d0d6876e9c705ad5002b353
        env:
          CACHE_NAME: docker-cache-dependencies
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-build-${{ env.CACHE_NAME }}-${{ hashFiles('Dockerfile') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.CACHE_NAME }}-

      - name: Build Docker image
        uses: docker/build-push-action@a66e35b9cbcf4ad0ea91ffcaf7bbad63ad9e0229
        with:
          context: .
          # this container is THE PR's artifact, and we will re-tag it
          # once the PR has been accepted
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new,mode=max
          outputs: type=docker,dest=${{ env.DOCKER_IMAGE_TAR_LOCATION }}

        # Temp fix
        # https://github.com/docker/build-push-action/issues/252
        # https://github.com/moby/buildkit/issues/1896
      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      - name: Upload artifact
        uses: actions/upload-artifact@27121b0bdffd731efa15d66772be8dc71245d074
        with:
          name: ${{ env.DOCKER_IMAGE_ARTIFACT_NAME }}
          path: ${{ env.DOCKER_IMAGE_TAR_LOCATION }}

  docker-publish:
    name: Publish Docker container
    runs-on: ubuntu-latest
    needs:
      - cargo-build
      - cargo-fmt
      - cargo-test-and-report
      - cargo-clippy-and-report
      - docker-build
    if: ${{ (github.repository == 'kristof-mattei/rust-end-to-end-application') && (github.event_name == 'pull_request') }}
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@94ab11c41e45d028884a99163086648e898eed25

      - name: Download artifact
        uses: actions/download-artifact@3be87be14a055c47b01d3bd88f8fe02320a9bb60
        with:
          name: ${{ env.DOCKER_IMAGE_ARTIFACT_NAME }}
          path: ${{ env.DOCKER_IMAGE_OUTPUT_LOCATION }}

      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Load image from artifact
        run: |
          docker load --input ${{ env.DOCKER_IMAGE_TAR_LOCATION }}

      - name: Push image with all tags
        run: |
          docker push ${REGISTRY,,}/${IMAGE_NAME,,} --all-tags

  # human
  all-done:
    name: All done
    # this is the job that should be marked as required on GitHub. It's the only one that'll reliably trigger
    # when any upstream fails: success
    # when all upstream skips: pass
    # when all upstream success: success
    # combination of upstream skip and success: success
    runs-on: ubuntu-latest
    needs:
      - docker-publish
    if: ${{ !failure() }}
    steps:
      - run: |
          echo "Great success!"
